:PROPERTIES:
:CATEGORY: Project Management
:END:
#+title: Project Manager - Haskell Home Link
#+author: James Leslie
#+TODO: TODO IN-PROGRESS WAITING ONGOING POSTPONED | DONE CANCELLED

* [0/5] Tasks

** ONGOING Create detailed design documentation
:PROPERTIES:
:component: documentation
:type:     task
:END:
I need to create a document explaining how the pieces of this project work. Realistically, this will be a constantly updated document and will never be "finished".

** TODO Implement a Message dispatcher
:PROPERTIES:
:type:     task
:component: backend
:priority: high
:END:
Some kind of data type needs to manage the connections and routing of messages. It should be abstract enough to be able to deal with different types communication (channels/sockets). Each event handler should have access to this.

I think that the Home island will be the core island that everything talks to directly, bar the proxy. The Home island will serve up some data to the frontend, but also send that data to the proxy.

** TODO Make all events have a source
This should make replying to an event a bit easier to manage.
** WAITING Implement client TLS connection controller
:PROPERTIES:
:type:     task
:priority: high
:ID:       74bae23a-bd5d-46f0-91f1-a13027ee84df
:component: backend
:END:
The Home application will act as a TLS client and try to connect to the Remote application. We will have a "TlsClient" type that will hook into an event loop.

This will depend on completing a basic TCP connection first, since that is simpler.

A basic TCP client has been implemented. It needs to be refined. It should try to connect to the given destination every 2 seconds, and then keep trying to reconnect when there is a connection break.

** TODO Rework Nix structure
:PROPERTIES:
:type:     packaging
:END:
Currently, the nix structure of this project is a real mess. This should be tidied up and organised.

* [0/0] Bugs

* Milestones
** v0.0.1.0 - MVP
:PROPERTIES:
:type:     milestone
:END:
We will have a minimal viable product when we have the following built:
1. Home application that can play a radio stream and be remotely controlled.
2. Proxy application that hosts the frontend and establishes a connection with the Home application.
3. A simple frontend that allows can be used to toggle the radio on the Home application.



# Local Variables:
# visual-fill-column-width: 80
# End:
