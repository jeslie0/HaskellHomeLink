#    -*- mode: org -*-


Archived entries from file /home/james/workspaces/Haskell/AssistantPi/docs/PROJECT.org


* DONE Create event loop structure
:PROPERTIES:
:type:     task
:ID:       407cc33b-9382-467e-a6be-7d856fdd14c5
:component: backend
:ARCHIVE_TIME: 2024-11-02 Sat 20:14
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2024-10-27 Sun 19:38]--[2024-10-27 Sun 20:38] =>  1:00
:END:
Each island's core processes will be managed by an event loop. This loop will run in a single thread, but could cause actions to run on their own thread, potentially (might be simpler to just have one thread in the event loop).

** Update
This is mostly done now. There are some small tweaks to be made to allow for intervals and timeouts, but the main structure is there.

* DONE Use Template Haskell to extract the desired protobuf message
:PROPERTIES:
:type:     task
:component: backend
:ARCHIVE_TIME: 2024-11-02 Sat 20:16
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
The =proto-lens= package auto generates types for us, however; for it's ~oneOf~ types, these are implemented as a union type. Our project structure tries to use open types and type classes, so this closed union type makes it hard to extend. The solution is to invoke Template Haskell to automate some pattern matching for us.

** Complete!
This is now complete. The envelope types can be made instances of Handler classes now. This allows them to be added straight to the event loop.

* DONE Add memory usage information to system page
:PROPERTIES:
:type:     task
:ARCHIVE_TIME: 2025-01-14 Tue 21:23
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks/Rework Nix structure
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
It would be use to see how much memory each device is using. This should be shown on the system page as chart.
Each island should report it's memory usage to home, which will the notify all of the proxies. Each proxy will store up to a certain time period of data, which is sent to the web for viewing.

* DONE Fix audio deadlock issue
:PROPERTIES:
:type:     bug
:ARCHIVE_TIME: 2025-01-14 Tue 21:23
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Bugs
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
It seems like it is possible to get into a bad state by spamming start and stop radio requests. There is probably an issue with the thread access which to  resolved. I think that making sure the audio socket gets safely made and not interrupted by an async exception is key.

* DONE Make all events have a source
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-14 Tue 21:24
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
This should make replying to an event a bit easier to manage.

* DONE Implement a Message dispatcher
:PROPERTIES:
:type:     task
:component: backend
:priority: high
:ARCHIVE_TIME: 2025-01-14 Tue 21:24
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
Some kind of data type needs to manage the connections and routing of messages. It should be abstract enough to be able to deal with different types communication (channels/sockets). Each event handler should have access to this.

I think that the Home island will be the core island that everything talks to directly, bar the proxy. The Home island will serve up some data to the frontend, but also send that data to the proxy.

* DONE Rework Nix structure
:PROPERTIES:
:type:     packaging
:ARCHIVE_TIME: 2025-02-10 Mon 06:51
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
Currently, the nix structure of this project is a real mess. This should be tidied up and organised.

* DONE Add Logs page
:PROPERTIES:
:type:     task
:ARCHIVE_TIME: 2025-02-10 Mon 06:51
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
The Haskell code needs a method to report info logs and errors. A log controller should me made that stores logs and propogates them to the frontend by a logs EndpointSequ

* DONE Remove redundant packages and source files
:PROPERTIES:
:type:     task
:ARCHIVE_TIME: 2025-02-16 Sun 22:47
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
There are several packages which were included originally in the cabal file, but they aren't used anymore. I cam having a hard time keeping track of what we actually use, so we need to either use a tool to determine what packages are necessary, or prune them by hand. We should also make sure unused source code files are deleted, such as the old Async wrapper around threads.

* DONE Add command line options to executables
:PROPERTIES:
:type:     task
:ARCHIVE_TIME: 2025-02-16 Sun 22:47
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
When we start using certificates, it will be useful to point the applications at a file, at runtime. This can be done using command line options. We need to find a suitable library and integrate it.

* DONE Implement client TLS connection controller
:PROPERTIES:
:type:     task
:priority: high
:ID:       74bae23a-bd5d-46f0-91f1-a13027ee84df
:component: backend
:ARCHIVE_TIME: 2025-02-16 Sun 22:47
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Tasks
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
The Home application will act as a TLS client and try to connect to the Remote application. We will have a "TlsClient" type that will hook into an event loop.

This will depend on completing a basic TCP connection first, since that is simpler.

A basic TCP client has been implemented. It needs to be refined. It should try to connect to the given destination every 2 seconds, and then keep trying to reconnect when there is a connection break.

* DONE Investigate TLS connection dropout causing program to stop
:PROPERTIES:
:type:     bug
:ARCHIVE_TIME: 2025-02-16 Sun 23:09
:ARCHIVE_FILE: ~/workspaces/Haskell/AssistantPi/docs/PROJECT.org
:ARCHIVE_OLPATH: Bugs
:ARCHIVE_CATEGORY: Project Management
:ARCHIVE_TODO: DONE
:END:
It seems like when a the Proxy application closes, the Home application crashes out. Something is not being handled properly in the TLS connection functions.
