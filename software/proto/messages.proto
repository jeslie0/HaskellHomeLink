syntax="proto3";

package proto;

// * Data types

enum ISLAND {
  UNKNOWN = 0;
  HOME = 1;
  LOCAL_HTTP = 2;
  REMOTE_PROXY = 3;
  CAMERA = 4;
}

enum STREAM_STATUS {
  OFF = 0;
  INITIATED = 1;
  PLAYING = 2;
}

enum LOG_LEVEL {
  UNDEFINED = 0;
  TRACE = 1;
  DEBUG = 2;
  INFO = 3;
  WARN = 4;
  ERROR = 5;
  FATAL = 6;
}

message CPUData {
  string vendor = 1;
  string modelName = 2;
}

message SystemData {
  optional CPUData cpuData = 1;
  bool inDockerContainer = 2;
  string operatingSystemName = 3;
  string architecture = 4;
  optional uint32 memTotalkB = 5;
  ISLAND island = 6;
}

message IslandsSystemData {
  repeated SystemData allSystemData = 1;
}

message RadioStation {
  string url = 1;
  uint32 id = 2;
}

// Received from HTTP Server.
message ModifyRadioRequest {
  optional RadioStation station = 1;
}

message RadioStatusUpdate {
  STREAM_STATUS status = 1;
  uint32 currentStationId = 2;
}

message MemoryUpdate {
  uint32 systemTimeMs = 1;
  uint32 memUsedkB = 2;
}

message MemoryInformation {
  repeated double pair = 1;
}

message IslandMemoryInformation {
  ISLAND island = 1;
  repeated MemoryInformation timeMem = 2;
}

message AllIslandMemoryData {
  repeated IslandMemoryInformation allIslandMemoryData = 1;
}

message CheckMemoryUsage {

}

message Log {
  int64 timestampMs = 1;
  ISLAND island = 2;
  LOG_LEVEL level = 3;
  string content = 4;
}

message Logs {
  repeated Log logs = 1;
}

message AddLog {
  Log log = 1;
}

// * Home Received Msgs

message ConnectTCP {
  string host = 1;
  string port = 2;
}

message HomeEnvelope {
  oneof payload {
    ModifyRadioRequest m1 = 1;
    ConnectTCP m2 = 2;
    SystemData m3 = 3;
    MemoryInformation m4 = 4;
    CheckMemoryUsage m5 = 5;
  }
}

// * Proxy Received Msgs

// Received from HTTP Server.
message GetRadioStatusRequest {

}

// Sent to HTTP Server
message GetRadioStatusResponse {
  int32 stateId = 1;
  STREAM_STATUS status = 2;
  uint32 currentStationId = 3;
}

message ProxyEnvelope {
  oneof payload {
    RadioStatusUpdate m1 = 1;
    GetRadioStatusResponse m2 = 2;
    SystemData m3 = 3;
    MemoryInformation m4 = 4;
    CheckMemoryUsage m5 = 5;
    AddLog m6 = 6;
  }
}

// * Camera msgs

message TakePicture {
 
}

message PictureData {
  bytes imageData = 1;
}

message CameraEnvelope {
  oneof payload {
    TakePicture m1 = 1;
  }
}
